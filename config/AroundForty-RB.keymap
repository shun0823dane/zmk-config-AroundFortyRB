#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#define MOUSE 6

#include <behaviors/rgbled_widget.dtsi>  // needed to use the behaviors
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos { compatible = "zmk,combos"; };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        pass: pass {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(A) &kp S &kp H &kp U &kp C &kp K &kp N1 &kp O &kp M &kp N2 &kp RET>;
            label = "PASS";
        };

        symbol_backets_KAGI: brackets_KAGI {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_1 &kp LEFT_BRACKET &kp RIGHT_BRACKET &kp ENTER &kp LEFT>;
            label = "BRACKETS_KAGI";
        };

        symbol_brackets_contain: brackets_contain {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp LBRC &kp RBRC &kp LEFT>;
            label = "BRACKETS_CONTAIN";
        };

        symbol_brackets_ZENKAKU: brackets_ZENKAKU {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_1 &kp LPAR &kp RPAR &kp ENTER &kp LEFT>;
            label = "BRACKETS_ZENKAKU";
        };

        symbol_brackets_hankaku: brackets_hankaku {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp LPAR &kp RPAR &kp LEFT>;
            label = "BRACKETS_HANKAKU";
        };

        browser_DupPage: browser_DupPage {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(L) &kp LG(ENTER)>;
            label = "BROWSER_DUPPAGE";
        };

        symbol_DQuot: symbol_DQuot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp DOUBLE_QUOTES &kp DOUBLE_QUOTES &kp LEFT>;
            label = "SYMBOL_DQUOT";
        };

        symbol_NAKAGURO: symbol_NAKAGURO {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG1 &kp SLASH &kp ENTER>;
            label = "SYMBOL_NAKAGURO";
        };

        symbol_colon: symbol_colong {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG1 &kp COLON &kp ENTER>;
            label = "SYMBOL_COLONG";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Mac-Default_Layer {
            bindings = <
&kp Q                &kp W                   &kp E                &kp R     &kp T                              &kp Y        &kp U                &kp I        &kp O        &kp P
&kp A                &kp S                   &kp D                &kp F     &kp G                              &kp H        &kp J                &lt 8 K      &kp L        &kp MINUS
&kp Z                &kp X                   &kp C                &kp V     &kp B        &lt 1 TAB             &kp N        &kp M                &kp COMMA    &kp PERIOD   &lt 2 BACKSPACE
&mt LCTRL LG(ENTER)  &mt LEFT_ALT LS(ENTER)  &mt LEFT_GUI DELETE  &mkp MB1  &lt 2 LANG2  &mt LEFT_SHIFT SPACE  &lt 1 LANG1  &lt 2 LA(BACKSPACE)  &lt 2 ENTER  &lt 7 LG(Z)  &kp RIGHT
            >;
        };

        Number_Layer {
            bindings = <
&kp LS(STAR)   &kp PLUS   &kp N7  &kp N8   &kp N9                          &kp LS(EXCL)   &symbol_brackets_hankaku  &symbol_brackets_contain  &kp LS(AMPERSAND)  &kp BSLH
&kp LS(COLON)  &kp EQUAL  &kp N4  &kp N5   &kp N6                          &kp LS(QMARK)  &symbol_brackets_ZENKAKU  &symbol_backets_KAGI      &kp LS(DLLR)       &kp BACKSPACE
&kp FSLH       &kp MINUS  &kp N1  &kp N2   &kp N3         &kp TAB          &symbol_DQuot  &symbol_NAKAGURO          &symbol_NAKAGURO          &kp PERIOD         &kp SLASH
&kp DELETE     &kp COMMA  &kp N0  &kp DOT  &kp BACKSPACE  &mt RSHFT COMMA  &kp FSLH       &kp SQT                   &kp SEMI                  &symbol_colon      &kp PERCENT
            >;
        };

        Control_Layer {
            bindings = <
&kp ESCAPE  &trans        &kp LS(LG(N7))  &kp LS(LG(N8))  &kp LS(LG(N9))             &kp LESS_THAN  &kp GREATER_THAN  &kp UP         &kp UP     &trans
&kp TAB     &kp LEFT_GUI  &kp DEL         &kp N5          &trans                     &kp BACKSPACE  &kp LEFT          &kp DOWN       &kp RIGHT  &kp BACKSPACE
&kp RIGHT   &kp RIGHT     &trans          &trans          &mkp MB3        &kp LC(A)  &trans         &trans            &trans         &trans     &trans
&pass       &trans        &trans          &trans          &trans          &trans     &kp BACKSPACE  &kp LC(E)         &kp BACKSPACE  &trans     &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        Win-Function_Layer {
            bindings = <
&kp LC(A)  &kp LC(X)     &kp LC(C)    &kp LC(V)  &kp LC(LS(V))          &kp LESS_THAN         &kp GREATER_THAN       &kp CARET        &kp PERCENT    &kp DOLLAR
&kp TAB    &kp LEFT_ALT  &kp LS(TAB)  &mkp MB1   &mkp MB2               &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp AT_SIGN      &kp AMPERSAND  &kp DOUBLE_QUOTES
&kp A      &trans        &trans       &trans     &mkp MB3       &trans  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp EXCLAMATION  &kp QUESTION   &kp SQT
&trans     &trans        &trans       &trans     &trans         &trans  &kp ENTER             &kp COLON              &kp BACKSPACE    &kp BACKSLASH  &kp HASH
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        Mac-Common_Layer {
            bindings = <
&kp ESCAPE      &trans        &trans       &kp LG(UP_ARROW)    &trans                       &kp LG(W)        &kp LG(LEFT_ARROW)  &mkp MB3        &kp LG(RIGHT_ARROW)  &kp HOME
&kp TAB         &kp LEFT_GUI  &kp LS(TAB)  &kp LG(LEFT_ARROW)  &kp LG(RIGHT_ARROW)          &kp LG(TAB)      &mkp MB1            &kp UP_ARROW    &mkp MB2             &kp PAGE_UP
&kp LEFT_SHIFT  &trans        &trans       &kp LG(DOWN_ARROW)  &trans               &trans  &kp LG(LS(TAB))  &kp LEFT_ARROW      &kp DOWN_ARROW  &kp RIGHT_ARROW      &kp PAGE_DOWN
&kp LCTRL       &trans        &trans       &trans              &trans               &trans  &trans           &kp LG(T)           &trans          &trans               &kp END
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        Win-Common_Layer {
            bindings = <
&kp ESCAPE      &trans        &trans       &kp LG(UP_ARROW)    &trans                       &kp LC(W)          &kp LA(LEFT_ARROW)  &mkp MB3        &kp LA(RIGHT_ARROW)  &kp HOME
&kp TAB         &kp LEFT_GUI  &kp LS(TAB)  &kp LG(LEFT_ARROW)  &kp LG(RIGHT_ARROW)          &kp LC(PAGE_UP)    &mkp MB1            &kp UP_ARROW    &mkp MB2             &kp PAGE_UP
&kp LEFT_SHIFT  &trans        &trans       &kp LG(DOWN_ARROW)  &trans               &trans  &kp LC(PAGE_DOWN)  &kp LEFT_ARROW      &kp DOWN_ARROW  &kp RIGHT_ARROW      &kp PAGE_DOWN
&kp LCTRL       &trans        &trans       &trans              &trans               &trans  &trans             &kp LC(T)           &trans          &trans               &kp END
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        AutoMouse_Layer {
            bindings = <
&kp ESCAPE  &kp LG(W)      &kp LG(SPACE)  &kp LG(R)      &kp LG(T)                         &kp LESS_THAN  &kp GREATER_THAN   &kp BACKSPACE  &kp LG(MINUS)  &kp LG(EQUAL)
&kp LG(A)   &lt 2 LG(S)    &kp DELETE     &kp LG(F)      &kp LS(LG(T))                     &kp LG(N)      &mkp MB1           &mo 8          &mkp MB2       &kp BACKSPACE
&kp LG(Z)   &kp LG(LA(V))  &kp LA(LG(C))  &kp LS(LG(V))  &trans         &trans             &kp LG(A)      &kp LG(C)          &kp LG(V)      &kp LC(LEFT)   &lt 2 LC(RIGHT)
&trans      &trans         &kp LANG1      &mkp MB1       &trans         &kp LA(LG(SPACE))  &lt 1 ENTER    &kp LA(LG(SPACE))  &kp ENTER      &kp LC(UP)     &kp LC(UP)
            >;
        };

        Setting_Layer {
            bindings = <
&studio_unlock  &trans  &trans  &trans  &trans         &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans          &trans  &trans  &trans  &trans         &trans        &trans          &trans        &trans        &trans
&trans          &trans  &trans  &trans  &trans  &to 0  &ind_bat      &trans          &trans        &trans        &bt BT_CLR
&trans          &trans  &trans  &trans  &trans  &to 1  &bootloader   &studio_unlock  &sys_reset    &trans        &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        Scroll_Layer {
            bindings = <
&kp LC(LA(E))    &kp LG(LEFT)   &kp LG(LA(N7))        &kp LA(LG(N8))  &kp LA(LG(NUMBER_9))                        &trans            &trans             &trans            &kp C_VOLUME_DOWN  &kp C_VOLUME_UP
&kp LC(LA(RET))  &kp LG(N)      &kp LG(LA(N4))        &kp LA(LG(N5))  &kp LG(LA(N6))                              &kp LEFT_CONTROL  &mkp MB1           &trans            &mkp MB2           &trans
&kp LC(LA(T))    &kp LG(RIGHT)  &kp LA(LG(NUMBER_1))  &kp LG(LA(N2))  &kp LG(LA(N3))        &trans                &trans            &kp LG(LBKT)       &trans            &kp LG(RBKT)       &trans
&kp LC(LA(L))    &kp LA(LC(M))  &kp LA(LC(R))         &trans          &trans                &kp LS(LG(NUMBER_4))  &kp LG(ENTER)     &kp LG(LA(SPACE))  &browser_DupPage  &kp LC(LEFT)       &trans
            >;
        };
    };
};
